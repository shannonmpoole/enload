#!/usr/bin/env node

"use strict";

var cluster = require('cluster')
  , os      = require('os')
  , fs      = require('fs')
  , program = require('commander')
  , Server  = require('../lib/server')
  , extend  = require('extend')
  , mode    = process.env.SETTINGS_FLAVOR || 'production'
  , debug   = process.execArgv.join(' ').indexOf('--debug') !== -1;
  
function list(val){
  return val.split(',');
}

function ports(val){
  return list(val).map(Number);
}

program
  .version('0.0.1')
  .option('-c, --config <path>',           'path to config file')
  .option('-w, --workers <n>',             'number of Workers (defaults to number of cpus)', parseInt)
  .option('-a, --addresses <list>',        'addresses to listen on (defaults to 127.0.0.1,::1)', list, ['127.0.0.1', '::1'])
  .option('-p, --ports <list>',            'ports to listen on (defaults to 80)', ports, [80])
  .option('-s, --ssl-ports <list>',        'ports to use ssl for', ports, [])
  .option('-k, --ssl-key <path>',          'path to ssl private key file')
  .option('-r, --ssl-cert <path>',         'path to ssl certificate file')
  .option('-u, --ssl-ca <list>',           'path(s) to ssl certifcate authority file(s)', list)
  .option('-t, --ttl <n>',                 'time to live for cache (defaults to 3000)', parseInt, 3000)
  .option('-E, --etcd-host <value>',       'etcd host address (defaults to 127.0.0.1)', '127.0.0.1')
  .option('-P, --etcd-port <n>',           'etcd host port (defaults to 4001)', parseInt, 4001)
  .option('-D, --etcd-directory <value>',  'etcd root directory for configuration (defaults to enload)', 'enload')
  .option('-K, --etcd-ssl-key <path>',     'path to ssl private key file for etcd')
  .option('-R, --etcd-ssl-cert <path>',    'path to ssl certificate file for etcd')
  .option('-U, --etcd-ssl-ca <list>',      'path(s) to ssl certifcate authority file(s) for etcd')
  .parse(process.argv);

//Prepare Config
var config = program.config ? JSON.parse(fs.readFileSync(program.config)) : {};

if(!config[mode]) config[mode] = {};

extend(true, config[mode], {
  addresses:  program.addresses,
  ports:      program.ports,
  ttl:        program.ttl,
  etcd: {
    host:       program.etcdHost,
    port:       program.etcdPort,
    directory:  program.etcdDirectory,
    ssl: {
      key:  program.etcdSslKey,
      cert: program.etcdSslCert,
      ca:   program.etcdSslCa
    }
  },
  ssl: {
    key:    program.sslKey,
    cert:   program.sslCert,
    ca:     program.sslCa,
    ports:  program.sslPorts
  }
});

if (cluster.isMaster && !debug) {
  //fork workers
  var workers = program.workers || os.cpus().length;
  
  for (var i = 0; i < workers; i++) {
    cluster.fork();
  }

  //if worker dies, start it back up
  cluster.on('exit', function(worker, code, signal) {
    console.log('Worker ' + worker.process.pid + ' died');
    cluster.fork();
  });
} else {
  //Start server
  var server = new Server(config[mode]);
  server.run();
}